module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBook {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  dateAdded: DateTime!
  title: String!
  era: String!
  author: String!
  releaseDate: String!
  imageId: String!
  summary: String!
  pages: Int!
  isbn: Int!
  timeLine: String!
  series: String
  bookStatus: String!
  epochTime: String!
  postedBy: User
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  title: String!
  era: String!
  author: String!
  releaseDate: String!
  imageId: String!
  summary: String!
  pages: Int!
  isbn: Int!
  timeLine: String!
  series: String
  bookStatus: String!
  epochTime: String!
  postedBy: UserCreateOneWithoutBooksInput
}

input BookCreateManyWithoutPostedByInput {
  create: [BookCreateWithoutPostedByInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateWithoutPostedByInput {
  id: ID
  title: String!
  era: String!
  author: String!
  releaseDate: String!
  imageId: String!
  summary: String!
  pages: Int!
  isbn: Int!
  timeLine: String!
  series: String
  bookStatus: String!
  epochTime: String!
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  dateAdded_ASC
  dateAdded_DESC
  title_ASC
  title_DESC
  era_ASC
  era_DESC
  author_ASC
  author_DESC
  releaseDate_ASC
  releaseDate_DESC
  imageId_ASC
  imageId_DESC
  summary_ASC
  summary_DESC
  pages_ASC
  pages_DESC
  isbn_ASC
  isbn_DESC
  timeLine_ASC
  timeLine_DESC
  series_ASC
  series_DESC
  bookStatus_ASC
  bookStatus_DESC
  epochTime_ASC
  epochTime_DESC
}

type BookPreviousValues {
  id: ID!
  dateAdded: DateTime!
  title: String!
  era: String!
  author: String!
  releaseDate: String!
  imageId: String!
  summary: String!
  pages: Int!
  isbn: Int!
  timeLine: String!
  series: String
  bookStatus: String!
  epochTime: String!
}

input BookScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dateAdded: DateTime
  dateAdded_not: DateTime
  dateAdded_in: [DateTime!]
  dateAdded_not_in: [DateTime!]
  dateAdded_lt: DateTime
  dateAdded_lte: DateTime
  dateAdded_gt: DateTime
  dateAdded_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  era: String
  era_not: String
  era_in: [String!]
  era_not_in: [String!]
  era_lt: String
  era_lte: String
  era_gt: String
  era_gte: String
  era_contains: String
  era_not_contains: String
  era_starts_with: String
  era_not_starts_with: String
  era_ends_with: String
  era_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  releaseDate: String
  releaseDate_not: String
  releaseDate_in: [String!]
  releaseDate_not_in: [String!]
  releaseDate_lt: String
  releaseDate_lte: String
  releaseDate_gt: String
  releaseDate_gte: String
  releaseDate_contains: String
  releaseDate_not_contains: String
  releaseDate_starts_with: String
  releaseDate_not_starts_with: String
  releaseDate_ends_with: String
  releaseDate_not_ends_with: String
  imageId: String
  imageId_not: String
  imageId_in: [String!]
  imageId_not_in: [String!]
  imageId_lt: String
  imageId_lte: String
  imageId_gt: String
  imageId_gte: String
  imageId_contains: String
  imageId_not_contains: String
  imageId_starts_with: String
  imageId_not_starts_with: String
  imageId_ends_with: String
  imageId_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  pages: Int
  pages_not: Int
  pages_in: [Int!]
  pages_not_in: [Int!]
  pages_lt: Int
  pages_lte: Int
  pages_gt: Int
  pages_gte: Int
  isbn: Int
  isbn_not: Int
  isbn_in: [Int!]
  isbn_not_in: [Int!]
  isbn_lt: Int
  isbn_lte: Int
  isbn_gt: Int
  isbn_gte: Int
  timeLine: String
  timeLine_not: String
  timeLine_in: [String!]
  timeLine_not_in: [String!]
  timeLine_lt: String
  timeLine_lte: String
  timeLine_gt: String
  timeLine_gte: String
  timeLine_contains: String
  timeLine_not_contains: String
  timeLine_starts_with: String
  timeLine_not_starts_with: String
  timeLine_ends_with: String
  timeLine_not_ends_with: String
  series: String
  series_not: String
  series_in: [String!]
  series_not_in: [String!]
  series_lt: String
  series_lte: String
  series_gt: String
  series_gte: String
  series_contains: String
  series_not_contains: String
  series_starts_with: String
  series_not_starts_with: String
  series_ends_with: String
  series_not_ends_with: String
  bookStatus: String
  bookStatus_not: String
  bookStatus_in: [String!]
  bookStatus_not_in: [String!]
  bookStatus_lt: String
  bookStatus_lte: String
  bookStatus_gt: String
  bookStatus_gte: String
  bookStatus_contains: String
  bookStatus_not_contains: String
  bookStatus_starts_with: String
  bookStatus_not_starts_with: String
  bookStatus_ends_with: String
  bookStatus_not_ends_with: String
  epochTime: String
  epochTime_not: String
  epochTime_in: [String!]
  epochTime_not_in: [String!]
  epochTime_lt: String
  epochTime_lte: String
  epochTime_gt: String
  epochTime_gte: String
  epochTime_contains: String
  epochTime_not_contains: String
  epochTime_starts_with: String
  epochTime_not_starts_with: String
  epochTime_ends_with: String
  epochTime_not_ends_with: String
  AND: [BookScalarWhereInput!]
  OR: [BookScalarWhereInput!]
  NOT: [BookScalarWhereInput!]
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateInput {
  title: String
  era: String
  author: String
  releaseDate: String
  imageId: String
  summary: String
  pages: Int
  isbn: Int
  timeLine: String
  series: String
  bookStatus: String
  epochTime: String
  postedBy: UserUpdateOneWithoutBooksInput
}

input BookUpdateManyDataInput {
  title: String
  era: String
  author: String
  releaseDate: String
  imageId: String
  summary: String
  pages: Int
  isbn: Int
  timeLine: String
  series: String
  bookStatus: String
  epochTime: String
}

input BookUpdateManyMutationInput {
  title: String
  era: String
  author: String
  releaseDate: String
  imageId: String
  summary: String
  pages: Int
  isbn: Int
  timeLine: String
  series: String
  bookStatus: String
  epochTime: String
}

input BookUpdateManyWithoutPostedByInput {
  create: [BookCreateWithoutPostedByInput!]
  delete: [BookWhereUniqueInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [BookScalarWhereInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateWithoutPostedByDataInput {
  title: String
  era: String
  author: String
  releaseDate: String
  imageId: String
  summary: String
  pages: Int
  isbn: Int
  timeLine: String
  series: String
  bookStatus: String
  epochTime: String
}

input BookUpdateWithWhereUniqueWithoutPostedByInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutPostedByDataInput!
}

input BookUpsertWithWhereUniqueWithoutPostedByInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutPostedByDataInput!
  create: BookCreateWithoutPostedByInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  dateAdded: DateTime
  dateAdded_not: DateTime
  dateAdded_in: [DateTime!]
  dateAdded_not_in: [DateTime!]
  dateAdded_lt: DateTime
  dateAdded_lte: DateTime
  dateAdded_gt: DateTime
  dateAdded_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  era: String
  era_not: String
  era_in: [String!]
  era_not_in: [String!]
  era_lt: String
  era_lte: String
  era_gt: String
  era_gte: String
  era_contains: String
  era_not_contains: String
  era_starts_with: String
  era_not_starts_with: String
  era_ends_with: String
  era_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  releaseDate: String
  releaseDate_not: String
  releaseDate_in: [String!]
  releaseDate_not_in: [String!]
  releaseDate_lt: String
  releaseDate_lte: String
  releaseDate_gt: String
  releaseDate_gte: String
  releaseDate_contains: String
  releaseDate_not_contains: String
  releaseDate_starts_with: String
  releaseDate_not_starts_with: String
  releaseDate_ends_with: String
  releaseDate_not_ends_with: String
  imageId: String
  imageId_not: String
  imageId_in: [String!]
  imageId_not_in: [String!]
  imageId_lt: String
  imageId_lte: String
  imageId_gt: String
  imageId_gte: String
  imageId_contains: String
  imageId_not_contains: String
  imageId_starts_with: String
  imageId_not_starts_with: String
  imageId_ends_with: String
  imageId_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  pages: Int
  pages_not: Int
  pages_in: [Int!]
  pages_not_in: [Int!]
  pages_lt: Int
  pages_lte: Int
  pages_gt: Int
  pages_gte: Int
  isbn: Int
  isbn_not: Int
  isbn_in: [Int!]
  isbn_not_in: [Int!]
  isbn_lt: Int
  isbn_lte: Int
  isbn_gt: Int
  isbn_gte: Int
  timeLine: String
  timeLine_not: String
  timeLine_in: [String!]
  timeLine_not_in: [String!]
  timeLine_lt: String
  timeLine_lte: String
  timeLine_gt: String
  timeLine_gte: String
  timeLine_contains: String
  timeLine_not_contains: String
  timeLine_starts_with: String
  timeLine_not_starts_with: String
  timeLine_ends_with: String
  timeLine_not_ends_with: String
  series: String
  series_not: String
  series_in: [String!]
  series_not_in: [String!]
  series_lt: String
  series_lte: String
  series_gt: String
  series_gte: String
  series_contains: String
  series_not_contains: String
  series_starts_with: String
  series_not_starts_with: String
  series_ends_with: String
  series_not_ends_with: String
  bookStatus: String
  bookStatus_not: String
  bookStatus_in: [String!]
  bookStatus_not_in: [String!]
  bookStatus_lt: String
  bookStatus_lte: String
  bookStatus_gt: String
  bookStatus_gte: String
  bookStatus_contains: String
  bookStatus_not_contains: String
  bookStatus_starts_with: String
  bookStatus_not_starts_with: String
  bookStatus_ends_with: String
  bookStatus_not_ends_with: String
  epochTime: String
  epochTime_not: String
  epochTime_in: [String!]
  epochTime_not_in: [String!]
  epochTime_lt: String
  epochTime_lte: String
  epochTime_gt: String
  epochTime_gte: String
  epochTime_contains: String
  epochTime_not_contains: String
  epochTime_starts_with: String
  epochTime_not_starts_with: String
  epochTime_ends_with: String
  epochTime_not_ends_with: String
  postedBy: UserWhereInput
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  password: String!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
  books: BookCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBooksInput {
  id: ID
  name: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  password: String
  books: BookUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  password: String
}

input UserUpdateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBooksDataInput {
  name: String
  password: String
}

input UserUpsertWithoutBooksInput {
  update: UserUpdateWithoutBooksDataInput!
  create: UserCreateWithoutBooksInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    